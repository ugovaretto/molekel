version=pmwiki-2.2.0 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.48 Safari/525.19
author=
charset=ISO-8859-1
csum=
host=148.187.130.153
name=Main.Build
rev=45
targets=Main.OpenBabel
text=(:title Build:)%0a%0aIn order to build ''Molekel'' from source you need the following tools%0a*''Subversion'' client - to get the code from the repository, optional if you download the source code archive%0a*''CMake'' ( http://www.cmake.org ) - makefile generation tool%0a*A C++ compiler such as ''gcc'' (MacOS X, Unix), ''MinGW'' (Windows) or ''Visual C++'' (Windows, recommended,  free version available at http://www.microsoft.com/express/vc)%0a*@@wget@@ (optional but useful to automate the build process as done in the ''Molekel'' build scripts)%0a*@@unix2dos@@ and @@dos2unix@@ (both optional) to convert @@EOL@@ separators  %0aand libraries:%0a*''Qt'': http://www.trolltech.com/products/qt%0a*''Qwt'': http://qwt.sourceforge.net%0a*''VTK'' 5.x: http://www.vtk.org%0a*''Coin3D'': http://www.coin3d.org%0a*''OpenMOIV'': http://www.tecn.upf.es/openMOIV %0a*''OpenBabel'': http://openbabel.sourceforge.net  %0a%0aAfter all the dependencies are installed and you have downloaded the source code you need to generate the makefiles with ''CMake''; three options available:%0a* (''RECOMMENDED'')  get one of the @@run_%3cenvironment>_cmake.sh/bat@@ files from the @@build@@ directory of the source distribution and change the paths to suit your environment then execute the script OR%0a* run @@ccmake@@ (Unix/Mac OS X) or @@CMakeSetup.exe@@ (Windows) and specify the include and library path through an interactive interface then execute @@make@@/@@nmake@@ OR%0a* run @@cmake@@ on the command line specifying the path to the @@CMakeLists.txt@@ configuration file and the include/library paths on the command line then execute @@make@@/@@nmake@@%0a%0a%0a!!Detailed instructions%0a%0a!!!I Dependencies%0a#Install ''Qt'' (http://www.trolltech.com/products/qt); ''Qt'' has to be installed before VTK because VTK needs some ''Qt'' libraries.%0a#Install ''VTK'' 5.x (http://www.vtk.org)%0a**build ''VTK'' from source and make sure the following parameters are set to @@ON@@%0a***@@VTK_USE_GUISUPPORT@@%0a***@@VTK_USE_QVTK@@%0a***@@VTK_USE_GL2PS@@%0a**Check out OS specific information below.%0a#Install ''OpenBabel'' 2.x libraries (http://openbabel.sourceforge.net)%0a**If you are building on Windows with ''MinGW'' check out the ''OpenBabel'' OS specific issues below.%0a#Install ''OpenInventor'' and ''Molecular Inventor''%0a*Any implementation of ''OpenInventor'' 2.x will work; you can get an open source version here (''Coin3D''): http://www.coin3d.org%0a**Note that in case you want to build ''OpenMOIV'' (or any program requiring ''Coin3D'') you also have to have in the @@PATH@@ the directory where the @@coin-config@@ file resides. In case ''Coin3D'' is installed as a framework on Mac OS this is not required.%0a*An open source implementation of ''Molecular Inventor'' (''OpenMOIV'') can be downloaded here: http://www.tecn.upf.es/openMOIV%0a*When building ''OpenMOIV'' on Linux/MinGW/VC++ make sure you set the @@OIV_DIR@@ environment variable to the installation directory of ''Coin3D''  (where the include and lib dirs are) e.g. @@export OIV_DIR=/usr/local@@ You do not need to do this on Mac OS X if you installed ''Coin3D'' as a framework (which is the default).%0a*Make sure you read the build information for ''OpenMOIV'' to undestand how to deal with fonts on different platforms.%0a%0aWhen building with ''MinGW'' you need to make sure that the @@gettimeofday@@ function is available (check in @@include/sys/time.h@@); in case it is not then download the latest @@mingw-runtime@@ environment or have a look at the [[OpenBabel | ''OpenBabel'' build page]].%0a%0a!!!II Build%0a%0aThese build instruction are useful only if you want to run ''CMake'' yourself instead of using one of the scripts available in the @@build@@ directory.%0a%0a#Uncompress the ''Molekel'' source archive, @@cd@@ to the top level distribution dir and create a @@cmakebuild@@ folder:%0a**@@mkdir cmakebuild@@%0a**cd to the ''cmakebuild'' folder%0a#Modify the @@PATH@@ variable so that the correct binary ''Qt'' dir is found: ''CMake'' finds Qt looking for the @@qmake@@ executable so you need to have the right @@qmake@@ executable as the first one in the path.%0a#Create a text file @@version_info.cmake@@ in the build directory; this file is included by the main @@CMakeLists.txt@@ file to set version information. Open @@version_info.cmake@@ and add something like (use whatever version numbers you want).%0a-> [@%0aSET( MOLEKEL_VERSION_MAJOR 5 )%0aSET( MOLEKEL_VERSION_MINOR 0 )%0aSET( MOLEKEL_VERSION_PATCH 0 )%0aSET( MOLEKEL_VERSION_BUILD 0 )%0aSET( MOLEKEL_VERSION_TYPE "development" )%0a@]%0a#Run @@ccmake@@ (Linux, Mac OS) or @@CMakeSetup.exe@@ (Windows) and make sure that all the parameters are correct.%0a**@@ccmake ../src@@%0a**@@IV_DYNAMIC@@ and @@MOIV_DYNAMIC@@ should be set to @@ON@@ in case dynamic libraries are used; to @@OFF@@ otherwise. Note that this only seems to be required on @@MinGW@@.%0a**The following parameters need to be set (make sure you also read the OS specific section) from within @@ccmake@@ (Linux, Mac) or @@CMakeSetup.exe@@ (Windows):%0a***@@OPENBABEL_INCLUDE_DIR@@: ''OpenBabel'' include dir; where the @@openbabel@@ include dir is e.g. @@/usr/local/include/openbabel-2.0@@%0a***@@OPENBABEL_LINK_DIR@@: ''OpenBabel'' library dir; where the @@libopenbabel.%3cdll|so>@@ file is.%0a***@@IV_INCLUDE_DIR@@: ''OpenInventor'' (''Coin3D'') include dir; where the @@Inventor@@ include dir resides. Not required on Mac if ''Coin'' is installed as a framework.%0a***@@IV_LINK_DIR@@: ''OpenInventor'' (''Coin3D'') lib dir. Not required on Mac if Coin is installed as a framework.%0a***@@MOIV_INCLUDE_DIR@@: ''Molecular Inventor'' include dir; where the @@ChemKit2@@ include directory is.%0a***@@MOIV_LINK_DIR@@: ''Molecular Inventor'' lib dir;%0a***@@VTK_DIR@@: ''VTK'' dir e.g. @@/usr/local/lib/vtk-5.0@@%0a#Generate the makefiles with @@ccmake@@ or @@CMakeSetup.exe@@ (configure then generate):%0a##Check that all the parameters are set to the proper values.%0a##Press @@[c]@@(Mac, Linux) or ''Configure''(Windows) to configure then @@[g]@@(Mac, Linux) or ''Ok''(Windows) to generate the makefiles.%0a**Whenever you change one or more parameter values in @@ccmake@@ or @@CMakeSetup@@ you'll have to configure before you can generate.%0a#Run @@make@@ or @@nmake@@.%0a%0aThe build process will generate the following tree in the build directory:%0a*@@dist@@ - release notes, license, readme%0a**@@bin@@ OR @@bundle@@ - binary or Mac bundle%0a**@@resources@@  - images, configuration files...%0a***@@toolbar@@ - toolbar icons%0a**@@doc@@ - user documentation%0a%0a'''''Note''''': with ''MinGW 3.4.5'' compilation of ''@@MolekelData.cpp@@'' can be very slow; to speed up build time during development @@#define MOLEKEL_USE_COMMON_FILE_FORMATS@@%0a%0a%0a!!!III Run%0a%0aIn order to launch ''Molekel'' you need to make sure that all the required dynamic libraries are accessible from the executable.%0a%0a'''Windows'''%0a->All the required ''dll''s must be in directories listed in the @@PATH@@ environment variable or in the same directory as the executable.%0a%0a'''Linux'''%0a->You can make all the required shared objects accessible by adding the directories where the libraries reside to the @@LD_LIBRARY_PATH@@ environment variable. To find the list of used ''dll''s run: @@ldd dist/bin/Molekel@@ from within the build directory.%0a%0a'''MacOS'''%0a->You should not have to do anything to run the program; if for whatever reason the program cannot find some dynamic libraries you can add the directories where the dynamic libraries reside to the @@DYLD_LIBRARY_PATH@@ environment variable. To find the list of dynamic libraries  and frameworks used run @@otool -L dist/bundle/Molekel.app/Contents/MacOS/Molekel@@ from the build directory.%0a->All the resources in the ''@@resource@@'' directory (including the ''@@toolbar@@'' dir) must be copied into ''@@Molekel.app/Contents/Resources@@''.  %0a%0a!!Rendering issues%0a%0aMolekel versions 5.3 or above use some advanced multi-pass rendering techniques to enhance visual quality; these techniques may generate visual artifacts on transparent surfaces on some specific graphic cards. We have experienced problems on SuSE 10.3 x86-32/NVIDIA 8800 Ultra and Windows XP 32bit/NVIDIA 8800 Ultra system; on Windows problems can be  fixed by selecting ''Let the 3D application decide'' (which should be the default) in the ''Image Settings'' page of the NVIDIA Control Panel.       %0a%0aIn general, in case you have rendering problems, get messages about errors in Coin or the program crashes when loading files without reporting any error, you can set the value of two environment variables as follows:%0a*@@COIN_FULL_INDIRECT_RENDERING=0@@%0a*@@COIN_FORCE_GL1_0_ONLY=1@@%0abefore launching Molekel to disable the use of advanced OpenGL features.%0a%0aTo set the environment variables permanently on Windows XP right-click on ''My Computer'' then select the ''Advanced'' tab and click on the ''Environment Variables'' button.%0a%0aYou can also set the @@COIN_DEBUG_GLGLUE@@ environment variable to @@1@@ before starting Molekel in a console window to print OpenGL debug information.%0aTo enable printing on standard output on Mac you'll have to invoke the actual executable in the ''Molekel.app'' folder i.e. @@Molekel.app/Contents/MacOS/Molekel@@.
time=1237223606
title=Build
author:1237223606=
diff:1237223606:1237222121:=1,2c1,2%0a%3c (:title Build:)%0a%3c %0a---%0a> (:title Build Instructions:)%0a> %0a87c87%0a%3c !!!III Run%0a---%0a> !!!III Test%0a
host:1237223606=148.187.130.153
author:1237222121=
diff:1237222121:1237221157:=26,28c26,29%0a%3c #Install ''Qt'' (http://www.trolltech.com/products/qt); ''Qt'' has to be installed before VTK because VTK needs some ''Qt'' libraries.%0a%3c #Install ''VTK'' 5.x (http://www.vtk.org)%0a%3c **build ''VTK'' from source and make sure the following parameters are set to @@ON@@%0a---%0a> #Install CMake (http://www.cmake.org)%0a> #Install the Open Source verion of Qt (http://www.trolltech.com/products/qt); Qt has to be installed before VTK because VTK needs some Qt libraries.%0a> #Install VTK 5.x (http://www.vtk.org)%0a> **if you build from source make sure the following parameters are set to @@ON@@%0a33,43c34,44%0a%3c #Install ''OpenBabel'' 2.x libraries (http://openbabel.sourceforge.net)%0a%3c **If you are building on Windows with ''MinGW'' check out the ''OpenBabel'' OS specific issues below.%0a%3c #Install ''OpenInventor'' and ''Molecular Inventor''%0a%3c *Any implementation of ''OpenInventor'' 2.x will work; you can get an open source version here (''Coin3D''): http://www.coin3d.org%0a%3c **Note that in case you want to build ''OpenMOIV'' (or any program requiring ''Coin3D'') you also have to have in the @@PATH@@ the directory where the @@coin-config@@ file resides. In case ''Coin3D'' is installed as a framework on Mac OS this is not required.%0a%3c *An open source implementation of ''Molecular Inventor'' (''OpenMOIV'') can be downloaded here: http://www.tecn.upf.es/openMOIV%0a%3c *When building ''OpenMOIV'' on Linux/MinGW/VC++ make sure you set the @@OIV_DIR@@ environment variable to the installation directory of ''Coin3D''  (where the include and lib dirs are) e.g. @@export OIV_DIR=/usr/local@@ You do not need to do this on Mac OS X if you installed ''Coin3D'' as a framework (which is the default).%0a%3c *Make sure you read the build information for ''OpenMOIV'' to undestand how to deal with fonts on different platforms.%0a%3c %0a%3c When building with ''MinGW'' you need to make sure that the @@gettimeofday@@ function is available (check in @@include/sys/time.h@@); in case it is not then download the latest @@mingw-runtime@@ environment or have a look at the [[OpenBabel | ''OpenBabel'' build page]].%0a%3c %0a---%0a> #Install OpenBabel 2.x libraries (http://openbabel.sourceforge.net)%0a> **If you are building on Windows with MinGW check out the OpenBabel OS specific issues below.%0a> #Install OpenInventor and Molecular Inventor%0a> *Any implementation of OpenInventor 2.x will work; you can get an open source version here (Coin3D): http://www.coin3d.org%0a> **Note that in case you want to build OpenMOIV (or any program requiring coin) you also have to have in the @@PATH@@ the directory where coin-config resides. In case Coin3D is installed as a framework on Mac OS this is not required.%0a> *An open source implementation of Molecular Inventor(OpenMOIV) can be downloaded here: http://www.tecn.upf.es/openMOIV%0a> *When building OpenMOIV on Linux/MinGW/VC++ make sure you set the OIV_DIR environment variable to the installation dir of Coin3D (where the include and lib dirs are) e.g. @@export OIV_DIR=/usr/local@@ You do not need to do this on Mac OS X if you installed Coin3D as a framework (which is the default).%0a> *Make sure you read the build information for OpenMOIV to undestand how to deal with fonts on different platform.%0a> %0a> On MinGW you need to make sure that the @@gettimeofday@@ function is available (check in include/sys/time.h); in case it's not then download the latest mingw-runtime environment or have a look at the [[OpenBabel | OpenBabel build page]].%0a> %0a46,48c47%0a%3c These build instruction are useful only if you want to run ''CMake'' yourself instead of using one of the scripts available in the @@build@@ directory.%0a%3c %0a%3c #Uncompress the ''Molekel'' source archive, @@cd@@ to the top level distribution dir and create a @@cmakebuild@@ folder:%0a---%0a> #Uncompress the molekel source archive, @@cd@@ to the top level distribution dir and create a @@cmakebuild@@ folder:%0a50,51c49,50%0a%3c **cd to the ''cmakebuild'' folder%0a%3c #Modify the @@PATH@@ variable so that the correct binary ''Qt'' dir is found: ''CMake'' finds Qt looking for the @@qmake@@ executable so you need to have the right @@qmake@@ executable as the first one in the path.%0a---%0a> **cd to cmakebuild folder%0a> #Modify the @@PATH@@ variable so that the correct binary Qt dir is found: Cmake finds Qt looking for the qmake executable so you need to have the right qmake executable as the first one in the path.%0a60c59%0a%3c #Run @@ccmake@@ (Linux, Mac OS) or @@CMakeSetup.exe@@ (Windows) and make sure that all the parameters are correct.%0a---%0a> #Run ''ccmake'' (Linux, Mac OS) or ''CMakeSetup''(Windows) and make sure that all the parameters are correct.%0a62,71c61,70%0a%3c **@@IV_DYNAMIC@@ and @@MOIV_DYNAMIC@@ should be set to @@ON@@ in case dynamic libraries are used; to @@OFF@@ otherwise. Note that this only seems to be required on @@MinGW@@.%0a%3c **The following parameters need to be set (make sure you also read the OS specific section) from within @@ccmake@@ (Linux, Mac) or @@CMakeSetup.exe@@ (Windows):%0a%3c ***@@OPENBABEL_INCLUDE_DIR@@: ''OpenBabel'' include dir; where the @@openbabel@@ include dir is e.g. @@/usr/local/include/openbabel-2.0@@%0a%3c ***@@OPENBABEL_LINK_DIR@@: ''OpenBabel'' library dir; where the @@libopenbabel.%3cdll|so>@@ file is.%0a%3c ***@@IV_INCLUDE_DIR@@: ''OpenInventor'' (''Coin3D'') include dir; where the @@Inventor@@ include dir resides. Not required on Mac if ''Coin'' is installed as a framework.%0a%3c ***@@IV_LINK_DIR@@: ''OpenInventor'' (''Coin3D'') lib dir. Not required on Mac if Coin is installed as a framework.%0a%3c ***@@MOIV_INCLUDE_DIR@@: ''Molecular Inventor'' include dir; where the @@ChemKit2@@ include directory is.%0a%3c ***@@MOIV_LINK_DIR@@: ''Molecular Inventor'' lib dir;%0a%3c ***@@VTK_DIR@@: ''VTK'' dir e.g. @@/usr/local/lib/vtk-5.0@@%0a%3c #Generate the makefiles with @@ccmake@@ or @@CMakeSetup.exe@@ (configure then generate):%0a---%0a> **IV_DYNAMIC and MOIV_DYNAMIC should be set to ON in case dynamic libraries are used; to OFF otherwise. Note that this only seems to be required on MINGW.%0a> **The following parameters need to be set (make sure you also read the OS specific section) from within ''ccmake''(Linux, Mac) or ''CMakeSetup''(Windows):%0a> ***@@OPENBABEL_INCLUDE_DIR@@: OpenBabel include dir; where the @@openbabel@@ include dir is e.g. @@/usr/local/include/openbabel-2.0@@%0a> ***@@OPENBABEL_LINK_DIR@@: OpenBabel library dir; where the @@libopenbabel@@ file is.%0a> ***@@IV_INCLUDE_DIR@@: OpenInventor(Coin3D) include dir; where the @@Inventor@@ include dir resides. Not required on Mac if Coin installed as a framework.%0a> ***@@IV_LINK_DIR@@: OpenInventor(Coin3D) lib dir. Not required on Mac if Coin installed as a framework.%0a> ***@@MOIV_INCLUDE_DIR@@: Molecular Inventor include dir; where the ChemKit2 include directory is.%0a> ***@@MOIV_LINK_DIR@@: Molecular Inventor lib dir;%0a> ***@@VTK_DIR@@: VTK dir e.g. @@/usr/local/lib/vtk-5.0@@%0a> #Generate the makefiles with ''ccmake'' or ''CMakeSetup (configure then generate):%0a74,77c73,76%0a%3c **Whenever you change one or more parameter values in @@ccmake@@ or @@CMakeSetup@@ you'll have to configure before you can generate.%0a%3c #Run @@make@@ or @@nmake@@.%0a%3c %0a%3c The build process will generate the following tree in the build directory:%0a---%0a> **Whenever you change one or more parameter values in ccmake or CMakeSetup you'll have to configure before you can generate.%0a> #Run @@make@@.%0a> %0a> The build process will generate the following tree in the build dir:%0a87,90c86,89%0a%3c !!!III Test%0a%3c %0a%3c In order to launch ''Molekel'' you need to make sure that all the required dynamic libraries are accessible from the executable.%0a%3c %0a---%0a> !!!III Run%0a> %0a> In order to launch Molekel you need to make sure that all the required dynamic libraries are accessible from the executable.%0a> %0a92,93c91,92%0a%3c ->All the required ''dll''s must be in directories listed in the @@PATH@@ environment variable or in the same directory as the executable.%0a%3c %0a---%0a> ->All the required dlls must be in directories listed in the @@PATH@@ environment variable or in the same directory as the executable.%0a> %0a95c94%0a%3c ->You can make all the required shared objects accessible by adding the directories where the libraries reside to the @@LD_LIBRARY_PATH@@ environment variable. To find the list of used ''dll''s run: @@ldd dist/bin/Molekel@@ from within the build directory.%0a---%0a> ->You can make all the required shared objects accessible by adding the directories where the libraries reside to the @@LD_LIBRARY_PATH@@ environment variable. To find the list of used dlls run: @@ldd dist/bin/Molekel@@ from the build directory.%0a
host:1237222121=148.187.130.153
author:1237221157=
diff:1237221157:1237220878:=3,7c3,7%0a%3c In order to build ''Molekel'' from source you need the following tools%0a%3c *''Subversion'' client - to get the code from the repository, optional if you download the source code archive%0a%3c *''CMake'' ( http://www.cmake.org ) - makefile generation tool%0a%3c *A C++ compiler such as ''gcc'' (MacOS X, Unix), ''MinGW'' (Windows) or ''Visual C++'' (Windows, recommended,  free version available at http://www.microsoft.com/express/vc)%0a%3c *@@wget@@ (optional but useful to automate the build process as done in the ''Molekel'' build scripts)%0a---%0a> In order to build Molekel from source you need the following tools%0a> *Subversion client - to get the code from the repository, optional if you download the source code archive%0a> *CMake ( http://www.cmake.org ) - makefile generation tool%0a> *A C++ compiler such as gcc (MacOS X, Unix), MinGW (Windows) or Visual C++ (Windows, recommended,  free version available at http://www.microsoft.com/express/vc)%0a> *@@wget@@ (optional but useful to automate the build process as done in the Molekel build scripts)%0a10,16c10,16%0a%3c *''Qt'': http://www.trolltech.com/products/qt%0a%3c *''Qwt'': http://qwt.sourceforge.net%0a%3c *''VTK'' 5.x: http://www.vtk.org%0a%3c *''Coin3D'': http://www.coin3d.org%0a%3c *''OpenMOIV'': http://www.tecn.upf.es/openMOIV %0a%3c *''OpenBabel'': http://openbabel.sourceforge.net  %0a%3c %0a---%0a> *Qt: http://www.trolltech.com/products/qt%0a> *Qwt: http://qwt.sourceforge.net%0a> *VTK 5.x: http://www.vtk.org%0a> *Coin3D: http://www.coin3d.org%0a> *OpenMOIV: http://www.tecn.upf.es/openMOIV %0a> *OpenBabel: http://openbabel.sourceforge.net  %0a> %0a18c18%0a%3c * (''RECOMMENDED'')  get one of the @@run_%3cenvironment>_cmake.sh/bat@@ files from the @@build@@ directory of the source distribution and change the paths to suit your environment then execute the script OR%0a---%0a> * (RECOMMENDED)  get one of the @@run_%3cenvironment>_cmake.sh/bat@@ files from the @@build@@ directory of the source distribution and change the paths to suit your environment then execute the script OR%0a23c23%0a%3c !!Detailed instructions%0a---%0a> !!Steps%0a
host:1237221157=148.187.130.153
author:1237220878=
diff:1237220878:1237208615:=2a3,6%0a> This section describes the procedure to follow when building Molekel on Linux, Windows and Mac OS X.%0a> %0a> Molekel is built with ''CMake'' and ''make''/''nmake'' and some libraries need to be installed before you can build the executable from source.%0a> %0a5c9%0a%3c *CMake ( http://www.cmake.org ) - makefile generation tool%0a---%0a> *CMake%0a17,21c21%0a%3c After all the dependencies are installed and you have downloaded the source code you need to generate the makefiles with ''CMake''; three options available:%0a%3c * (RECOMMENDED)  get one of the @@run_%3cenvironment>_cmake.sh/bat@@ files from the @@build@@ directory of the source distribution and change the paths to suit your environment then execute the script OR%0a%3c * run @@ccmake@@ (Unix/Mac OS X) or @@CMakeSetup.exe@@ (Windows) and specify the include and library path through an interactive interface then execute @@make@@/@@nmake@@ OR%0a%3c * run @@cmake@@ on the command line specifying the path to the @@CMakeLists.txt@@ configuration file and the include/library paths on the command line then execute @@make@@/@@nmake@@%0a%3c %0a---%0a> The best way of building Molekel is to look at the shell scripts found in the @@build@@ and @@install@@ directories which are used to automate the build process and perform tasks such as check out the required components from the source code repository and invoke ''CMake'' with the proper configuration parameters.%0a
host:1237220878=148.187.130.153
author:1237208615=
diff:1237208615:1237208579:=27c27,28%0a%3c #Install the Open Source verion of Qt (http://www.trolltech.com/products/qt); Qt has to be installed before VTK because VTK needs some Qt libraries.%0a---%0a> #Install the Open Source verion of Qt%0a> (http://www.trolltech.com/products/qt); Qt has to be installed before VTK because VTK needs some Qt libraries.%0a
host:1237208615=148.187.130.153
author:1237208579=
diff:1237208579:1237208482:=21a22,23%0a> %0a> Building the above lbraries (when needed) on Mac OS, and Linux is straightforward, it takes some time but you should not encounter any issues; building everything except OpenBabel with MinGW is fairly easy too.%0a
host:1237208579=148.187.130.153
author:1237208482=
diff:1237208482:1236956489:=3c3%0a%3c This section describes the procedure to follow when building Molekel on Linux, Windows and Mac OS X.%0a---%0a> This setcion describes the procedure to follow when building Molekel on Linux, Windows and Mac OS X.%0a
host:1237208482=148.187.130.153
author:1236956489=
diff:1236956489:1236956468:=1c1%0a%3c (:title Build Instructions:)%0a---%0a> !Build Instructions%0a
host:1236956489=148.187.130.153
author:1236956468=
diff:1236956468:1236956430:=11c11%0a%3c *@@wget@@ (optional but useful to automate the build process as done in the Molekel build scripts)%0a---%0a> *wget (optional but useful to automate the build process as done in the Molekel build scripts)%0a
host:1236956468=148.187.130.153
author:1236956430=
diff:1236956430:1236955910:=8c8%0a%3c *Subversion client - to get the code from the repository, optional if you download the source code archive%0a---%0a> *Subversion client%0a
host:1236956430=148.187.130.153
author:1236955910=
diff:1236955910:1236953687:=7,8c7,13%0a%3c In order to build Molekel from source you need the following tools%0a%3c *Subversion client%0a---%0a> Some shell scripts found in the @@build@@ and @@install@@ directories are available to automate the build process, these are useful to build redistributable archives but can also be used to e.g. check out the required components from the source code repository and invoke ''CMake'' with the proper configuration parameters.%0a> %0a> Molekel now (December 2008) builds with Microsft Visual C++ (free version available at http://www.microsoft.com/express/vc). The easiest way of building Molekel on %0a> If you need to build Molekel on Windows you might want to check out the mingw scripts since they will take care of checking out the code, downloading all the dependencies except Qt and build everything, provided you have the following tools/toolkits already installed:%0a> *MinGW%0a> *MSYS%0a> *SVN%0a10,13c15,18%0a%3c *A C++ compiler such as gcc (MacOS X, Unix), MinGW (Windows) or Visual C++ (Windows, recommended,  free version available at http://www.microsoft.com/express/vc)%0a%3c *wget (optional but useful to automate the build process as done in the Molekel build scripts)%0a%3c *@@unix2dos@@ and @@dos2unix@@ (both optional) to convert @@EOL@@ separators  %0a%3c and libraries:%0a---%0a> *wget (used only to get the dependency archive through ftp; can be done manually)%0a> *unix2dos (optional - used to convert all text files in the distribution to win format)    %0a> %0a> It is recommended that you get the libraries from the following sites:%0a19,22c24,25%0a%3c *OpenBabel: http://openbabel.sourceforge.net  %0a%3c %0a%3c The best way of building Molekel is to look at the shell scripts found in the @@build@@ and @@install@@ directories which are used to automate the build process and perform tasks such as check out the required components from the source code repository and invoke ''CMake'' with the proper configuration parameters.%0a%3c %0a---%0a> *OpenBabel: http://openbabel.sourceforge.net %0a> %0a24a28,30%0a> We do have pre-built and source distributions of the above libraries on our ftp site at this address: [[ftp://ftp.cscs.ch/out/molekel/molekel_5.3/dep | ftp://ftp.cscs.ch/out/molekel/molekel_5.3/dep]]. %0a> %0a> %0a29,30d34%0a%3c #Install the Open Source verion of Qt%0a%3c (http://www.trolltech.com/products/qt); Qt has to be installed before VTK because VTK needs some Qt libraries.%0a36a41%0a> #Install the Open Source verion of Qt 4.2 (http://www.trolltech.com/products/qt)%0a43c48%0a%3c *When building OpenMOIV on Linux/MinGW/VC++ make sure you set the OIV_DIR environment variable to the installation dir of Coin3D (where the include and lib dirs are) e.g. @@export OIV_DIR=/usr/local@@ You do not need to do this on Mac OS X if you installed Coin3D as a framework (which is the default).%0a---%0a> *When building OpenMOIV on Linux/MinGW make sure you set the OIV_DIR environment variable to the installation dir of Coin3D (where the include and lib dirs are) e.g. @@export OIV_DIR=/usr/local@@ You do not need to do this on Mac OS X if you installe Coin3D as a framework (which is the default).%0a115c120,121%0a%3c To enable printing on standard output on Mac you'll have to invoke the actual executable in the ''Molekel.app'' folder i.e. @@Molekel.app/Contents/MacOS/Molekel@@.%0a\ No newline at end of file%0a---%0a> To enable printing on standard output on Mac you'll have to invoke the actual executable in the ''Molekel.app'' folder i.e. @@Molekel.app/Contents/MacOS/Molekel@@.%0a> %0a
host:1236955910=148.187.130.153
author:1236953687=
diff:1236953687:1236952666:=3,6c3,6%0a%3c This setcion describes the procedure to follow when building Molekel on Linux, Windows and Mac OS X.%0a%3c %0a%3c Molekel is built with ''CMake'' and ''make''/''nmake'' and some libraries need to be installed before you can build the executable from source.%0a%3c %0a---%0a> This setcion describes the procedure to follow when building Molekel on Linux (gcc), Windows (MinGW) and Mac OS X (gcc).%0a> %0a> Molekel is built with ''CMake'' and ''Make'' and some libraries need to be installed before you can build the executable.%0a> %0a9c9%0a%3c Molekel now (December 2008) builds with Microsft Visual C++ (free version available at http://www.microsoft.com/express/vc). The easiest way of building Molekel on %0a---%0a> Molekel now (December 2008) builds with Microsft Visual C++ (free version available at http://www.microsoft.com/express/vc).%0a17a18,20%0a> ''Note'':%0a> ->it is possible to build everything with MS VC++ compiler 7.1 or better, but this requires the use of the commercial version of Qt or the unsupported Qt distribution you can find through this page: http://psi-im.org/wiki/Compiling_Qt4_on_Windows. It might be however a problem to build OpenBabel libraries with VC++ since as of OpenBabel 2.0.2 the provided Visual Studio (6 and 8) project files can be used to build the executable only, not the libraries.%0a> %0a19,20c22%0a%3c *Qt: http://www.trolltech.com/products/qt%0a%3c *Qwt: http://qwt.sourceforge.net%0a---%0a> *Qt 4.2: http://www.trolltech.com/products/qt%0a
host:1236953687=148.187.130.153
author:1236952666=
diff:1236952666:1236952205:=8,9d7%0a%3c %0a%3c Molekel now (December 2008) builds with Microsft Visual C++ (free version available at http://www.microsoft.com/express/vc).%0a
host:1236952666=148.187.130.153
author:1236952205=
diff:1236952205:1236952172:=60c60%0a%3c -> [@%0a---%0a> [@%0a
host:1236952205=148.187.130.153
author:1236952172=
diff:1236952172:1236952153:=16,18d15%0a%3c ''Note'':%0a%3c ->it is possible to build everything with MS VC++ compiler 7.1 or better, but this requires the use of the commercial version of Qt or the unsupported Qt distribution you can find through this page: http://psi-im.org/wiki/Compiling_Qt4_on_Windows. It might be however a problem to build OpenBabel libraries with VC++ since as of OpenBabel 2.0.2 the provided Visual Studio (6 and 8) project files can be used to build the executable only, not the libraries.%0a%3c %0a26,27d22%0a%3c Building the above lbraries (when needed) on Mac OS, and Linux is straightforward, it takes some time but you should not encounter any issues; building everything except OpenBabel with MinGW is fairly easy too.%0a%3c %0a30c25,27%0a%3c %0a---%0a> Building the above lbraries (when needed) on Mac OS, and Linux is straightforward, it takes some time but you should not encounter any issues; building everything except OpenBabel with MinGW is fairly easy too.%0a> %0a> %0a60d56%0a%3c [@%0a66d61%0a%3c @]%0a
host:1236952172=148.187.130.153
author:1236952153=
diff:1236952153:1236952091:=57,61c57,61%0a%3c SET( MOLEKEL_VERSION_MAJOR 5 )%0a%3c SET( MOLEKEL_VERSION_MINOR 0 )%0a%3c SET( MOLEKEL_VERSION_PATCH 0 )%0a%3c SET( MOLEKEL_VERSION_BUILD 0 )%0a%3c SET( MOLEKEL_VERSION_TYPE "development" )%0a---%0a> @@SET( MOLEKEL_VERSION_MAJOR 5 )@@%0a> @@SET( MOLEKEL_VERSION_MINOR 0 )@@%0a> @@SET( MOLEKEL_VERSION_PATCH 0 )@@%0a> @@SET( MOLEKEL_VERSION_BUILD 0 )@@%0a> @@SET( MOLEKEL_VERSION_TYPE "development" )@@%0a
host:1236952153=148.187.130.153
author:1236952091=
diff:1236952091:1236952029:=57,61c57,63%0a%3c @@SET( MOLEKEL_VERSION_MAJOR 5 )@@%0a%3c @@SET( MOLEKEL_VERSION_MINOR 0 )@@%0a%3c @@SET( MOLEKEL_VERSION_PATCH 0 )@@%0a%3c @@SET( MOLEKEL_VERSION_BUILD 0 )@@%0a%3c @@SET( MOLEKEL_VERSION_TYPE "development" )@@%0a---%0a> [=%0a> SET( MOLEKEL_VERSION_MAJOR 5 )%0a> SET( MOLEKEL_VERSION_MINOR 0 )%0a> SET( MOLEKEL_VERSION_PATCH 0 )%0a> SET( MOLEKEL_VERSION_BUILD 0 )%0a> SET( MOLEKEL_VERSION_TYPE "development" )%0a> =]%0a
host:1236952091=148.187.130.153
author:1236952029=
diff:1236952029:1236951996:=57c57%0a%3c [=%0a---%0a> @@%0a63c63%0a%3c =]%0a---%0a> @@%0a
host:1236952029=148.187.130.153
author:1236951996=
diff:1236951996:1202996636:=57c57%0a%3c @@%0a---%0a> [@%0a63c63%0a%3c @@%0a---%0a> @]%0a
host:1236951996=148.187.130.153
author:1202996636=
diff:1202996636:1202996582:=15a16,18%0a> ''Note'':%0a> ->it is possible to build everything with MS VC++ compiler 7.1 or better, but this requires the use of the commercial version of Qt or the unsupported Qt distribution you can find through this page: http://psi-im.org/wiki/Compiling_Qt4_on_Windows. It might be however a problem to build OpenBabel libraries with VC++ since as of OpenBabel 2.0.2 the provided Visual Studio (6 and 8) project files can be used to build the executable only, not the libraries.%0a> %0a23,24d25%0a%3c We do have pre-built and source distributions of the above libraries on our ftp site at this address: [[ftp://ftp.cscs.ch/out/molekel/molekel_5.3/dep | ftp://ftp.cscs.ch/out/molekel/molekel_5.3/dep]]. %0a%3c %0a27c28,30%0a%3c %0a---%0a> We do have pre-built and source distributions of the above libraries on our ftp site at this address: [[ftp://ftp.cscs.ch/out/molekel/molekel_5.3/dep | ftp://ftp.cscs.ch/out/molekel/molekel_5.3/dep]]. %0a> %0a> %0a
host:1202996636=148.187.130.131
author:1202996582=
diff:1202996582:1202994933:=28,30c28,30%0a%3c We do have pre-built and source distributions of the above libraries on our ftp site at this address: [[ftp://ftp.cscs.ch/out/molekel/molekel_5.3/dep | ftp://ftp.cscs.ch/out/molekel/molekel_5.3/dep]]. %0a%3c %0a%3c %0a---%0a> We do have pre-built and source distribution of the above libraries on our ftp site at this address: [[ftp://ftp.cscs.ch/out/molekel/molekel_5.3/dep | ftp://ftp.cscs.ch/out/molekel/molekel_5.3/dep]]. %0a> %0a> %0a
host:1202996582=148.187.130.131
author:1202994933=
diff:1202994933:1202993012:=26,30c26,28%0a%3c Building the above lbraries (when needed) on Mac OS, and Linux is straightforward, it takes some time but you should not encounter any issues; building everything except OpenBabel with MinGW is fairly easy too.%0a%3c %0a%3c We do have pre-built and source distribution of the above libraries on our ftp site at this address: [[ftp://ftp.cscs.ch/out/molekel/molekel_5.3/dep | ftp://ftp.cscs.ch/out/molekel/molekel_5.3/dep]]. %0a%3c %0a%3c %0a---%0a> Building the above lbraries (when needed) on Mac OS, and Linux is straightforward, it takes some time but you should not encounter any issues; building everything except OpenBabel with MinGW is fairly easy too, if however you prefer to use precompiled versions of the libraries you can find prebuilt versions for MinGW and other platform on this site under the ''Support Files'' section which is currently password protected; contact us through the ''Contact'' form if you need to download precompiled versions of the above libraries. %0a> %0a> %0a
host:1202994933=148.187.130.131
author:1202993012=
diff:1202993012:1182957836:=108,110c108%0a%3c Molekel versions 5.3 or above use some advanced multi-pass rendering techniques to enhance visual quality; these techniques may generate visual artifacts on transparent surfaces on some specific graphic cards. We have experienced problems on SuSE 10.3 x86-32/NVIDIA 8800 Ultra and Windows XP 32bit/NVIDIA 8800 Ultra system; on Windows problems can be  fixed by selecting ''Let the 3D application decide'' (which should be the default) in the ''Image Settings'' page of the NVIDIA Control Panel.       %0a%3c %0a%3c In general, in case you have rendering problems, get messages about errors in Coin or the program crashes when loading files without reporting any error, you can set the value of two environment variables as follows:%0a---%0a> In case you have rendering problems, get messages about errors in Coin or the program crashes when loading files without reporting any error, you can set the value of two environment variables as follows:%0a115,116d112%0a%3c To set the environment variables permanently on Windows XP right-click on ''My Computer'' then select the ''Advanced'' tab and click on the ''Environment Variables'' button.%0a%3c %0a
host:1202993012=148.187.130.131
author:1182957836=
diff:1182957836:1182957053:=5,15c5,6%0a%3c Molekel is built with ''CMake'' and ''Make'' and some libraries need to be installed before you can build the executable.%0a%3c %0a%3c Some shell scripts found in the @@build@@ and @@install@@ directories are available to automate the build process, these are useful to build redistributable archives but can also be used to e.g. check out the required components from the source code repository and invoke ''CMake'' with the proper configuration parameters.%0a%3c If you need to build Molekel on Windows you might want to check out the mingw scripts since they will take care of checking out the code, downloading all the dependencies except Qt and build everything, provided you have the following tools/toolkits already installed:%0a%3c *MinGW%0a%3c *MSYS%0a%3c *SVN%0a%3c *CMake%0a%3c *wget (used only to get the dependency archive through ftp; can be done manually)%0a%3c *unix2dos (optional - used to convert all text files in the distribution to win format)    %0a%3c %0a---%0a> Molekel is built with CMake and Make and some libraries need to be installed before you can build the executable.%0a> %0a
host:1182957836=148.187.130.131
author:1182957053=
diff:1182957053:1168248392:=3,4c3,4%0a%3c This setcion describes the procedure to follow when building Molekel on Linux (gcc), Windows (MinGW) and Mac OS X (gcc).%0a%3c %0a---%0a> This setcion describes the procedure to follow when building Molekel on Linux (gcc), Windows (MinGW) and Mac OS X (gcc). The information on this section is a subset of the information containted in the ''@@doc/developer/build.txt@@'' file found in the source code repository.%0a> %0a17,19c17,19%0a%3c Building the above lbraries (when needed) on Mac OS, and Linux is straightforward, it takes some time but you should not encounter any issues; building everything except OpenBabel with MinGW is fairly easy too, if however you prefer to use precompiled versions of the libraries you can find prebuilt versions for MinGW and other platform on this site under the ''Support Files'' section which is currently password protected; contact us through the ''Contact'' form if you need to download precompiled versions of the above libraries. %0a%3c %0a%3c %0a---%0a> Building the above lbraries (when needed) on Mac OS, and Linux is straightforward, it takes some time but you should not encounter any issues; building everything except OpenBabel with MinGW is fairly easy too, if however you prefer to use precompiled versions of the libraries you can find prebuilt versions for MinGW and other platform on this site under the ''Support Files'' section which is currently password protected; contact me through the ''Contact'' form if you need to download precompiled versions of the above libraries. %0a> %0a> %0a40,41d39%0a%3c On MinGW you need to make sure that the @@gettimeofday@@ function is available (check in include/sys/time.h); in case it's not then download the latest mingw-runtime environment or have a look at the [[OpenBabel | OpenBabel build page]].%0a%3c %0a
host:1182957053=148.187.130.131
author:1168248392=Ugo Varetto
diff:1168248392:1168248359:=95,96d94%0a%3c !!Rendering issues%0a%3c %0a
host:1168248392=148.187.130.131
author:1168248359=Ugo Varetto
diff:1168248359:1167987813:=95c95%0a%3c In case you have rendering problems, get messages about errors in Coin or the program crashes when loading files without reporting any error, you can set the value of two environment variables as follows:%0a---%0a> In case you have rendering problems (or get messages about errors in Coin) you can set the value of two environment variables as follows:%0a98,99c98%0a%3c before launching Molekel to disable the use of advanced OpenGL features.%0a%3c %0a---%0a> %0a
host:1168248359=148.187.130.131
author:1167987813=Ugo Varetto
diff:1167987813:1166806321:=86,87c86,87%0a%3c ->All the required dlls must be in directories listed in the @@PATH@@ environment variable or in the same directory as the executable.%0a%3c %0a---%0a> ->all the required dlls must be in directories listed in the @@PATH@@ environment variable or in the same directory as the executable.%0a> %0a89,90c89,90%0a%3c ->You can make all the required shared objects accessible by adding the directories where the libraries reside to the @@LD_LIBRARY_PATH@@ environment variable. To find the list of used dlls run: @@ldd dist/bin/Molekel@@ from the build directory.%0a%3c %0a---%0a> ->you can make all the required shared objects accessible by adding the directories where the libraries reside to the @@LD_LIBRARY_PATH@@ environment variable. To find the list of used dlls run: @@ldd dist/bin/Molekel@@ from the build directory.%0a> %0a92,94c92,93%0a%3c ->You should not have to do anything to run the program; if for whatever reason the program cannot find some dynamic libraries you can add the directories where the dynamic libraries reside to the @@DYLD_LIBRARY_PATH@@ environment variable. To find the list of dynamic libraries  and frameworks used run @@otool -L dist/bundle/Molekel.app/Contents/MacOS/Molekel@@ from the build directory.%0a%3c ->All the resources in the ''@@resource@@'' directory (including the ''@@toolbar@@'' dir) must be copied into ''@@Molekel.app/Contents/Resources@@''.  %0a%3c %0a---%0a> ->you should not have to do anything to run the program; if for whatever reason the program cannot find some dynamic libraries you can add the directories where the dynamic libraries reside to the @@DYLD_LIBRARY_PATH@@ environment variable. To find the list of dynamic libraries  and frameworks used run @@otool -L dist/bundle/Molekel.app/Contents/MacOS/Molekel@@ from the build directory.%0a> %0a
host:1167987813=148.187.130.131
author:1166806321=Ugo Varetto
diff:1166806321:1166806266:=46c46%0a%3c #Create a text file @@version_info.cmake@@ in the build directory; this file is included by the main @@CMakeLists.txt@@ file to set version information. Open @@version_info.cmake@@ and add something like (use whatever version numbers you want).%0a---%0a> #Create a text file @@version_info.cmake@@ in the build directory; this file is included by the main @@CMakeLists.txt@@ file to set version information. Open @@version_info.cmake@@ and add somthing like (use whatever version numbers you want).%0a
host:1166806321=148.187.130.131
author:1166806266=Ugo Varetto
diff:1166806266:1166716740:=46,53d45%0a%3c #Create a text file @@version_info.cmake@@ in the build directory; this file is included by the main @@CMakeLists.txt@@ file to set version information. Open @@version_info.cmake@@ and add somthing like (use whatever version numbers you want).%0a%3c [@%0a%3c SET( MOLEKEL_VERSION_MAJOR 5 )%0a%3c SET( MOLEKEL_VERSION_MINOR 0 )%0a%3c SET( MOLEKEL_VERSION_PATCH 0 )%0a%3c SET( MOLEKEL_VERSION_BUILD 0 )%0a%3c SET( MOLEKEL_VERSION_TYPE "development" )%0a%3c @]%0a
host:1166806266=148.187.130.131
author:1166716740=Ugo Varetto
diff:1166716740:1166716577:=11,19c11,19%0a%3c *Qt 4.2: http://www.trolltech.com/products/qt%0a%3c *VTK 5.x: http://www.vtk.org%0a%3c *Coin3D: http://www.coin3d.org%0a%3c *OpenMOIV: http://www.tecn.upf.es/openMOIV %0a%3c *OpenBabel: http://openbabel.sourceforge.net %0a%3c %0a%3c Building the above lbraries (when needed) on Mac OS, and Linux is straightforward, it takes some time but you should not encounter any issues; building everything except OpenBabel with MinGW is fairly easy too, if however you prefer to use precompiled versions of the libraries you can find prebuilt versions for MinGW and other platform on this site under the ''Support Files'' section which is currently password protected; contact me through the ''Contact'' form if you need to download precompiled versions of the above libraries. %0a%3c %0a%3c %0a---%0a> *Qt 4.2 %0a> *VTK 5.x%0a> *Coin3D%0a> *OpenMOIV%0a> *OpenBabel%0a> %0a> Building the above lbraries (when needed) on Mac OS, and Linux is straightforward, it takes some time but you should not encounter any issues; building everything except OpenBabel on MinGW is fairly easy too, if however you prefer to use precompiled versions of the libraries you can find prebuilt versions for MinGW and other platform on this site under the ''Support Files'' section which is currently password protected, contact me through the ''Contact'' form if you need to download precompiled versions of the above libraries. %0a> %0a> %0a
host:1166716740=148.187.130.131
author:1166716577=Ugo Varetto
diff:1166716577:1166716366:=11c11%0a%3c *Qt 4.2 %0a---%0a> *Qt 4.2%0a17,19c17,19%0a%3c Building the above lbraries (when needed) on Mac OS, and Linux is straightforward, it takes some time but you should not encounter any issues; building everything except OpenBabel on MinGW is fairly easy too, if however you prefer to use precompiled versions of the libraries you can find prebuilt versions for MinGW and other platform on this site under the ''Support Files'' section which is currently password protected, contact me through the ''Contact'' form if you need to download precompiled versions of the above libraries. %0a%3c %0a%3c %0a---%0a> Building the above lbraries (when needed) on Mac OS, and Linux is straightforward, it takes some time but you should not encounter any issues; building everything except OpenBabel on MinGW is fairly easy too, if however you prefer to use precompiled versions of the libraries you can find prebuilt versions for MinGW and other platform on this site under the ''Support Files'' section which is currently password protected, contact me through the ''Contact'' form if you need to get access to the ''Support Files'' section. %0a> %0a> %0a
host:1166716577=148.187.130.131
author:1166716366=Ugo Varetto
diff:1166716366:1166711940:=0a1,2%0a> !! %25red%25 Update in progress%0a> %0a10,19d11%0a%3c It is recommended that you get the libraries from the following sites:%0a%3c *Qt 4.2%0a%3c *VTK 5.x%0a%3c *Coin3D%0a%3c *OpenMOIV%0a%3c *OpenBabel%0a%3c %0a%3c Building the above lbraries (when needed) on Mac OS, and Linux is straightforward, it takes some time but you should not encounter any issues; building everything except OpenBabel on MinGW is fairly easy too, if however you prefer to use precompiled versions of the libraries you can find prebuilt versions for MinGW and other platform on this site under the ''Support Files'' section which is currently password protected, contact me through the ''Contact'' form if you need to get access to the ''Support Files'' section. %0a%3c %0a%3c %0a
host:1166716366=148.187.130.131
author:1166711940=Ugo Varetto
diff:1166711940:1166711479:=10,11c10,11%0a%3c ->it is possible to build everything with MS VC++ compiler 7.1 or better, but this requires the use of the commercial version of Qt or the unsupported Qt distribution you can find through this page: http://psi-im.org/wiki/Compiling_Qt4_on_Windows. It might be however a problem to build OpenBabel libraries with VC++ since as of OpenBabel 2.0.2 the provided Visual Studio (6 and 8) project files can be used to build the executable only, not the libraries.%0a%3c %0a---%0a> ->it should be possible to build everything with MS VC++ compiler 7.1 or better, but this requires the use of the commercial version of Qt or the unsupported Qt distribution you can find through this page: http://psi-im.org/wiki/Compiling_Qt4_on_Windows.%0a> %0a72,84c72,96%0a%3c '''Linux'''%0a%3c ->you can make all the required shared objects accessible by adding the directories where the libraries reside to the @@LD_LIBRARY_PATH@@ environment variable. To find the list of used dlls run: @@ldd dist/bin/Molekel@@ from the build directory.%0a%3c %0a%3c '''MacOS'''%0a%3c ->you should not have to do anything to run the program; if for whatever reason the program cannot find some dynamic libraries you can add the directories where the dynamic libraries reside to the @@DYLD_LIBRARY_PATH@@ environment variable. To find the list of dynamic libraries  and frameworks used run @@otool -L dist/bundle/Molekel.app/Contents/MacOS/Molekel@@ from the build directory.%0a%3c %0a%3c In case you have rendering problems (or get messages about errors in Coin) you can set the value of two environment variables as follows:%0a%3c *@@COIN_FULL_INDIRECT_RENDERING=0@@%0a%3c *@@COIN_FORCE_GL1_0_ONLY=1@@%0a%3c %0a%3c You can also set the @@COIN_DEBUG_GLGLUE@@ environment variable to @@1@@ before starting Molekel in a console window to print OpenGL debug information.%0a%3c To enable printing on standard output on Mac you'll have to invoke the actual executable in the ''Molekel.app'' folder i.e. @@Molekel.app/Contents/MacOS/Molekel@@.%0a%3c %0a---%0a> Linux: you can make all the required shared objects accessible%0a>        by adding the directories where the libraries reside%0a>        to the LD_LIBRARY_PATH environment variable.%0a>        To find the list of used dlls run: ldd dist/bin/Molekel%0a>        from the build directory.%0a> %0a> MacOS: add the directories where the dynamic libraries reside%0a>        to the DYLD_LIBRARY_PATH environment variable.%0a>        To find the list of dynamic libraries  and frameworks%0a>        used run:%0a>        otool -L dist/bundle/Molekel.app/Contents/MacOS/Molekel%0a>        from the build directory.%0a> %0a> In case you have rendering problems (or get messages about errors%0a> in Coin) you can set the value of two environment variables as follows:%0a> %0a> COIN_FULL_INDIRECT_RENDERING = 0%0a> COIN_FORCE_GL1_0_ONLY = 1%0a> %0a> You can also set the COIN_DEBUG_GLGLUE environment variable to 1 before%0a> starting Molekel in a console window to print OpenGL debug information.%0a> To enable printing on standard output on Mac you'll have to invoke%0a> the actual executable in the Molekel.app folder i.e.%0a> Molekel.app/Contents/MacOS/Molekel.%0a> %0a
host:1166711940=148.187.130.131
author:1166711479=Ugo Varetto
diff:1166711479:1166711324:=10,11c10,14%0a%3c ->it should be possible to build everything with MS VC++ compiler 7.1 or better, but this requires the use of the commercial version of Qt or the unsupported Qt distribution you can find through this page: http://psi-im.org/wiki/Compiling_Qt4_on_Windows.%0a%3c %0a---%0a> -->it should be possible to build everything with MS VC++ compiler%0a> -->7.1 or better, but this requires the use of the commercial version%0a> -->of Qt or the unsupported Qt distribution you can find through this page:%0a> -->http://psi-im.org/wiki/Compiling_Qt4_on_Windows.%0a> %0a
host:1166711479=148.187.130.131
author:1166711324=Ugo Varetto
diff:1166711324:1166711002:=66,99d65%0a%3c %0a%3c %0a%3c !!!III Run%0a%3c %0a%3c In order to launch Molekel you need to make sure that all the required dynamic libraries are accessible from the executable.%0a%3c %0a%3c '''Windows'''%0a%3c ->all the required dlls must be in directories listed in the @@PATH@@ environment variable or in the same directory as the executable.%0a%3c %0a%3c Linux: you can make all the required shared objects accessible%0a%3c        by adding the directories where the libraries reside%0a%3c        to the LD_LIBRARY_PATH environment variable.%0a%3c        To find the list of used dlls run: ldd dist/bin/Molekel%0a%3c        from the build directory.%0a%3c %0a%3c MacOS: add the directories where the dynamic libraries reside%0a%3c        to the DYLD_LIBRARY_PATH environment variable.%0a%3c        To find the list of dynamic libraries  and frameworks%0a%3c        used run:%0a%3c        otool -L dist/bundle/Molekel.app/Contents/MacOS/Molekel%0a%3c        from the build directory.%0a%3c %0a%3c In case you have rendering problems (or get messages about errors%0a%3c in Coin) you can set the value of two environment variables as follows:%0a%3c %0a%3c COIN_FULL_INDIRECT_RENDERING = 0%0a%3c COIN_FORCE_GL1_0_ONLY = 1%0a%3c %0a%3c You can also set the COIN_DEBUG_GLGLUE environment variable to 1 before%0a%3c starting Molekel in a console window to print OpenGL debug information.%0a%3c To enable printing on standard output on Mac you'll have to invoke%0a%3c the actual executable in the Molekel.app folder i.e.%0a%3c Molekel.app/Contents/MacOS/Molekel.%0a%3c %0a
host:1166711324=148.187.130.131
author:1166711002=Ugo Varetto
diff:1166711002:1166710703:=38,39c38,39%0a%3c **@@mkdir cmakebuild@@%0a%3c **cd to cmakebuild folder%0a---%0a> *@@mkdir cmakebuild@@%0a> *cd to cmakebuild folder%0a42,51c42,51%0a%3c **@@ccmake ../src@@%0a%3c **IV_DYNAMIC and MOIV_DYNAMIC should be set to ON in case dynamic libraries are used; to OFF otherwise. Note that this only seems to be required on MINGW.%0a%3c **The following parameters need to be set (make sure you also read the OS specific section) from within ''ccmake''(Linux, Mac) or ''CMakeSetup''(Windows):%0a%3c ***@@OPENBABEL_INCLUDE_DIR@@: OpenBabel include dir; where the @@openbabel@@ include dir is e.g. @@/usr/local/include/openbabel-2.0@@%0a%3c ***@@OPENBABEL_LINK_DIR@@: OpenBabel library dir; where the @@libopenbabel@@ file is.%0a%3c ***@@IV_INCLUDE_DIR@@: OpenInventor(Coin3D) include dir; where the @@Inventor@@ include dir resides. Not required on Mac if Coin installed as a framework.%0a%3c ***@@IV_LINK_DIR@@: OpenInventor(Coin3D) lib dir. Not required on Mac if Coin installed as a framework.%0a%3c ***@@MOIV_INCLUDE_DIR@@: Molecular Inventor include dir; where the ChemKit2 include directory is.%0a%3c ***@@MOIV_LINK_DIR@@: Molecular Inventor lib dir;%0a%3c ***@@VTK_DIR@@: VTK dir e.g. @@/usr/local/lib/vtk-5.0@@%0a---%0a> *@@ccmake ../src@@%0a> *IV_DYNAMIC and MOIV_DYNAMIC should be set to ON in case dynamic libraries are used; to OFF otherwise. Note that this only seems to be required on MINGW.%0a> *The following parameters need to be set (make sure you also read the OS specific section) from within ''ccmake''(Linux, Mac) or ''CMakeSetup''(Windows):%0a> **@@OPENBABEL_INCLUDE_DIR@@: OpenBabel include dir; where the @@openbabel@@ include dir is e.g. @@/usr/local/include/openbabel-2.0@@%0a> **@@OPENBABEL_LINK_DIR@@: OpenBabel library dir; where the @@libopenbabel@@ file is.%0a> **@@IV_INCLUDE_DIR@@: OpenInventor(Coin3D) include dir; where the @@Inventor@@ include dir resides. Not required on Mac if Coin installed as a framework.%0a> **@@IV_LINK_DIR@@: OpenInventor(Coin3D) lib dir. Not required on Mac if Coin installed as a framework.%0a> **@@MOIV_INCLUDE_DIR@@: Molecular Inventor include dir; where the ChemKit2 include directory is.%0a> **@@MOIV_LINK_DIR@@: Molecular Inventor lib dir;%0a> **@@VTK_DIR@@: VTK dir e.g. @@/usr/local/lib/vtk-5.0@@%0a65c65%0a%3c '''''Note''''': with ''MinGW 3.4.5'' compilation of ''@@MolekelData.cpp@@'' can be very slow; to speed up build time during development @@#define MOLEKEL_USE_COMMON_FILE_FORMATS@@%0a---%0a> '''''Note''''': with MinGW 3.4.5 compilation of ''@@MolekelData.cpp@@'' can be very slow; to speed up build time during development @@#define MOLEKEL_USE_COMMON_FILE_FORMATS@@%0a
host:1166711002=148.187.130.131
author:1166710703=Ugo Varetto
diff:1166710703:1166709393:=3,6c3,6%0a%3c !Build Instructions%0a%3c %0a%3c This setcion describes the procedure to follow when building Molekel on Linux (gcc), Windows (MinGW) and Mac OS X (gcc). The information on this section is a subset of the information containted in the ''@@doc/developer/build.txt@@'' file found in the source code repository.%0a%3c %0a---%0a> !Build%0a> %0a> This setcion describes the procedure to follow when building Molekel on Linux (gcc), Windows (MinGW) and Mac OS X (gcc).%0a> %0a33,65c33%0a%3c *Make sure you read the build information for OpenMOIV to undestand how to deal with fonts on different platform.%0a%3c %0a%3c !!!II Build%0a%3c %0a%3c #Uncompress the molekel source archive, @@cd@@ to the top level distribution dir and create a @@cmakebuild@@ folder:%0a%3c *@@mkdir cmakebuild@@%0a%3c *cd to cmakebuild folder%0a%3c #Modify the @@PATH@@ variable so that the correct binary Qt dir is found: Cmake finds Qt looking for the qmake executable so you need to have the right qmake executable as the first one in the path.%0a%3c #Run ''ccmake'' (Linux, Mac OS) or ''CMakeSetup''(Windows) and make sure that all the parameters are correct.%0a%3c *@@ccmake ../src@@%0a%3c *IV_DYNAMIC and MOIV_DYNAMIC should be set to ON in case dynamic libraries are used; to OFF otherwise. Note that this only seems to be required on MINGW.%0a%3c *The following parameters need to be set (make sure you also read the OS specific section) from within ''ccmake''(Linux, Mac) or ''CMakeSetup''(Windows):%0a%3c **@@OPENBABEL_INCLUDE_DIR@@: OpenBabel include dir; where the @@openbabel@@ include dir is e.g. @@/usr/local/include/openbabel-2.0@@%0a%3c **@@OPENBABEL_LINK_DIR@@: OpenBabel library dir; where the @@libopenbabel@@ file is.%0a%3c **@@IV_INCLUDE_DIR@@: OpenInventor(Coin3D) include dir; where the @@Inventor@@ include dir resides. Not required on Mac if Coin installed as a framework.%0a%3c **@@IV_LINK_DIR@@: OpenInventor(Coin3D) lib dir. Not required on Mac if Coin installed as a framework.%0a%3c **@@MOIV_INCLUDE_DIR@@: Molecular Inventor include dir; where the ChemKit2 include directory is.%0a%3c **@@MOIV_LINK_DIR@@: Molecular Inventor lib dir;%0a%3c **@@VTK_DIR@@: VTK dir e.g. @@/usr/local/lib/vtk-5.0@@%0a%3c #Generate the makefiles with ''ccmake'' or ''CMakeSetup (configure then generate):%0a%3c ##Check that all the parameters are set to the proper values.%0a%3c ##Press @@[c]@@(Mac, Linux) or ''Configure''(Windows) to configure then @@[g]@@(Mac, Linux) or ''Ok''(Windows) to generate the makefiles.%0a%3c **Whenever you change one or more parameter values in ccmake or CMakeSetup you'll have to configure before you can generate.%0a%3c #Run @@make@@.%0a%3c %0a%3c The build process will generate the following tree in the build dir:%0a%3c *@@dist@@ - release notes, license, readme%0a%3c **@@bin@@ OR @@bundle@@ - binary or Mac bundle%0a%3c **@@resources@@  - images, configuration files...%0a%3c ***@@toolbar@@ - toolbar icons%0a%3c **@@doc@@ - user documentation%0a%3c %0a%3c '''''Note''''': with MinGW 3.4.5 compilation of ''@@MolekelData.cpp@@'' can be very slow; to speed up build time during development @@#define MOLEKEL_USE_COMMON_FILE_FORMATS@@%0a---%0a> *Make sure you read the build information for OpenMOIV to undestand how to deal with fonts on different platform.%0a\ No newline at end of file%0a
host:1166710703=148.187.130.131
author:1166709393=Ugo Varetto
diff:1166709393:1166709285:=29,30d28%0a%3c *Any implementation of OpenInventor 2.x will work; you can get an open source version here (Coin3D): http://www.coin3d.org%0a%3c **Note that in case you want to build OpenMOIV (or any program requiring coin) you also have to have in the @@PATH@@ the directory where coin-config resides. In case Coin3D is installed as a framework on Mac OS this is not required.%0a33c31,33%0a%3c *Make sure you read the build information for OpenMOIV to undestand how to deal with fonts on different platform.%0a\ No newline at end of file%0a---%0a> *Make sure you read the build information for OpenMOIV to undestand how to deal with fonts on different platform.%0a> *Any implementation of OpenInventor 2.x will work; you can get an open source version here (Coin3D): http://www.coin3d.org%0a> **Note that in case you want to build OpenMOIV (or any program requiring coin) you also have to have in the @@PATH@@ the directory where coin-config resides. Again, in case Coin3D is installed as a framework on Mac OS this is not required.%0a\ No newline at end of file%0a
host:1166709393=148.187.130.131
author:1166709285=Ugo Varetto
diff:1166709285:1166709252:=25c25%0a%3c #Install the Open Source verion of Qt 4.2 (http://www.trolltech.com/products/qt)%0a---%0a> *Install the Open Source verion of Qt 4.2 (http://www.trolltech.com/products/qt)%0a
host:1166709285=148.187.130.131
author:1166709252=Ugo Varetto
diff:1166709252:1166708833:=26,33c26,55%0a%3c #Install OpenBabel 2.x libraries (http://openbabel.sourceforge.net)%0a%3c **If you are building on Windows with MinGW check out the OpenBabel OS specific issues below.%0a%3c #Install OpenInventor and Molecular Inventor%0a%3c *An open source implementation of Molecular Inventor(OpenMOIV) can be downloaded here: http://www.tecn.upf.es/openMOIV%0a%3c *When building OpenMOIV on Linux/MinGW make sure you set the OIV_DIR environment variable to the installation dir of Coin3D (where the include and lib dirs are) e.g. @@export OIV_DIR=/usr/local@@ You do not need to do this on Mac OS X if you installe Coin3D as a framework (which is the default).%0a%3c *Make sure you read the build information for OpenMOIV to undestand how to deal with fonts on different platform.%0a%3c *Any implementation of OpenInventor 2.x will work; you can get an open source version here (Coin3D): http://www.coin3d.org%0a%3c **Note that in case you want to build OpenMOIV (or any program requiring coin) you also have to have in the @@PATH@@ the directory where coin-config resides. Again, in case Coin3D is installed as a framework on Mac OS this is not required.%0a\ No newline at end of file%0a---%0a> %0a> 4) Install OpenBabel 2.x libraries%0a>    http://openbabel.sourceforge.net%0a>    If you are building on Windows with MinGW check out the OS specific issues below.%0a> %0a> 5) Install OpenInventor and Molecular Inventor%0a> %0a>    An open source implementation of Molecular Inventor(OpenMOIV) can be%0a>    downloaded here:%0a> %0a>    http://www.tecn.upf.es/openMOIV%0a> %0a>    When building OpenMOIV on Linux/MinGW make sure you set the OIV_DIR%0a>    environment variable to the installation dir of Coin3D (where the%0a>    include and lib dirs are) e.g.%0a>    export OIV_DIR=/usr/local%0a>    You do not need to do this on Mac OS X if you installe Coin3D as a%0a>    framework (which is the default).%0a> %0a>    Make sure you read the build information for OpenMOIV to undestand%0a>    how to deal with fonts.%0a> %0a>    Any implementation of OpenInventor 2.x will work; you can get an%0a>    open source version here (Coin3D):%0a> %0a>    http://www.coin3d.org%0a> %0a>    Note that in case you want to build OpenMOIV (or any program requiring coin)%0a>    you also have to have in the PATH the directory where coin-config resides.%0a>    Again, in case Coin3D is installed as a framework on Mac OS this is not required.%0a\ No newline at end of file%0a
host:1166709252=148.187.130.131
author:1166708833=Ugo Varetto
diff:1166708833:1166708762:=1,2d0%0a%3c !! %25red%25 Update in progress%0a%3c %0a
host:1166708833=148.187.130.131
author:1166708762=Ugo Varetto
diff:1166708762:1166708512:=22,24c22,26%0a%3c **Check out OS specific information below.%0a%3c *Install the Open Source verion of Qt 4.2 (http://www.trolltech.com/products/qt)%0a%3c %0a---%0a> ***Check out OS specific information below.%0a> %0a> 3) Install the Open Source verion of Qt 4.x%0a>    http://www.trolltech.com/products/qt%0a> %0a
host:1166708762=148.187.130.131
author:1166708512=Ugo Varetto
diff:1166708512:1166708348:=5,6c5,6%0a%3c Molekel is built with CMake and Make and some libraries need to be installed before you can build the executable.%0a%3c %0a---%0a> Molekel is built with CMake and Make and a number of libraries need to be installed before you can build the executable.%0a> %0a11,55c11%0a%3c -->http://psi-im.org/wiki/Compiling_Qt4_on_Windows.%0a%3c %0a%3c !!Steps%0a%3c %0a%3c !!!I Dependencies%0a%3c #Install CMake (http://www.cmake.org)%0a%3c #Install VTK 5.x (http://www.vtk.org)%0a%3c **if you build from source make sure the following parameters are set to @@ON@@%0a%3c ***@@VTK_USE_GUISUPPORT@@%0a%3c ***@@VTK_USE_QVTK@@%0a%3c ***@@VTK_USE_GL2PS@@%0a%3c ***Check out OS specific information below.%0a%3c %0a%3c 3) Install the Open Source verion of Qt 4.x%0a%3c    http://www.trolltech.com/products/qt%0a%3c %0a%3c 4) Install OpenBabel 2.x libraries%0a%3c    http://openbabel.sourceforge.net%0a%3c    If you are building on Windows with MinGW check out the OS specific issues below.%0a%3c %0a%3c 5) Install OpenInventor and Molecular Inventor%0a%3c %0a%3c    An open source implementation of Molecular Inventor(OpenMOIV) can be%0a%3c    downloaded here:%0a%3c %0a%3c    http://www.tecn.upf.es/openMOIV%0a%3c %0a%3c    When building OpenMOIV on Linux/MinGW make sure you set the OIV_DIR%0a%3c    environment variable to the installation dir of Coin3D (where the%0a%3c    include and lib dirs are) e.g.%0a%3c    export OIV_DIR=/usr/local%0a%3c    You do not need to do this on Mac OS X if you installe Coin3D as a%0a%3c    framework (which is the default).%0a%3c %0a%3c    Make sure you read the build information for OpenMOIV to undestand%0a%3c    how to deal with fonts.%0a%3c %0a%3c    Any implementation of OpenInventor 2.x will work; you can get an%0a%3c    open source version here (Coin3D):%0a%3c %0a%3c    http://www.coin3d.org%0a%3c %0a%3c    Note that in case you want to build OpenMOIV (or any program requiring coin)%0a%3c    you also have to have in the PATH the directory where coin-config resides.%0a%3c    Again, in case Coin3D is installed as a framework on Mac OS this is not required.%0a\ No newline at end of file%0a---%0a> -->http://psi-im.org/wiki/Compiling_Qt4_on_Windows.%0a\ No newline at end of file%0a
host:1166708512=148.187.130.131
author:1166708348=Ugo Varetto
diff:1166708348:1166708348:=1,11d0%0a%3c !Build%0a%3c %0a%3c This setcion describes the procedure to follow when building Molekel on Linux (gcc), Windows (MinGW) and Mac OS X (gcc).%0a%3c %0a%3c Molekel is built with CMake and Make and a number of libraries need to be installed before you can build the executable.%0a%3c %0a%3c ''Note'':%0a%3c -->it should be possible to build everything with MS VC++ compiler%0a%3c -->7.1 or better, but this requires the use of the commercial version%0a%3c -->of Qt or the unsupported Qt distribution you can find through this page:%0a%3c -->http://psi-im.org/wiki/Compiling_Qt4_on_Windows.%0a\ No newline at end of file%0a
host:1166708348=148.187.130.131
