//
// Molekel - Molecular Visualization Program
// Copyright (C) 2006, 2007, 2008, 2009 Swiss National Supercomputing Centre (CSCS)
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
// MA  02110-1301, USA.
//
// $Author$
// $Date$
// $Revision$
//


/// @todo add common.h include with:
/// - org, app name, version...
/// - list of supported file format
/// - list of libraries/tools (with version info) the application depends on
/// common.h file could also be generated by cmake


// STD
#include <string>

// Qt
#include <QApplication>
#include <QMessageBox>
#include <QPixmap>
#include <QSettings>
#include <QByteArray>
#include <QMessageBox>

// Molekel
#include "MainWindow.h"
#include "MolekelException.h"
#include "utility/System.h"
#include "Commands.h"


/// Settings prefixes
static const char ORGANIZATION[] = "CSCS";
static const char ORGANIZATION_DOMAIN[] = "cscs.com";
static const char APPLICATION_NAME[] = "Molekel";

static const int DEFAULT_WIN_WIDTH  = 800;
static const int DEFAULT_WIN_HEIGHT = 600;

//------------------------------------------------------------------------------
static void LogError( const char* msg )
{
    QMessageBox::critical( 0, "Exception caught", msg,
                           QMessageBox::Ok, QMessageBox::NoButton );
}

//------------------------------------------------------------------------------
static QIcon GetMolekelIcon()
{

    QString Path = QCoreApplication::applicationDirPath() +
#ifndef __APPLE_CC__
#if defined(_MSC_VER) && defined(MOLEKEL_DEVELOPMENT)
		"/../dist/resources/Molekel.png";
#else
        "/../resources/Molekel.png";
#endif
#else
        "/../Resources/Molekel.png";
#endif
    return QIcon( Path );

}

//------------------------------------------------------------------------------
/// Initializes, parses and executes commands on command line.
void ExecuteCommandLine( int argc, char** argv, MainWindow* w )
{
        assert( w );

        // Initialize command line parameter handlers.
        const LoadMoleculeOp lm( w );
        const ResizeOp rsz( w );
        const PositionOp pos( w );
        const HelpOp h;
        const PlayEventsOp ev( w );
        const SettingsOp set( true ); //create new entries if not present
        const ExitOp ex;
        Operations ops;
        ops[ "load"   ] = &lm;
        ops[ "size"   ] = &rsz;
        ops[ "position" ] = &pos;
        ops[ "help"   ] = &h;
        ops[ "events" ] = &ev;
        ops[ "settings" ] = &set;
        ops[ "exit" ] = &ex;
        ExecuteCommands( ParseCommandLine( argc, argv ), ops );
}


//------------------------------------------------------------------------------
/// Entry point. The following command line parameter are supported:
/// - -load <type> <file path>
/// - -size <width> <height>
/// - -help
/// - -events <file path> <initial delay> <time scaling>
/// For automatic event playback an initial delay is required to wait for
/// proper window initialization before sending events.
int main(int argc, char *argv[])
{

    try
    {
        QCoreApplication::setOrganizationName( ORGANIZATION );
        QCoreApplication::setOrganizationDomain( ORGANIZATION_DOMAIN );
        QCoreApplication::setApplicationName( APPLICATION_NAME );

        QApplication app( argc, argv );
        app.setWindowIcon( GetMolekelIcon() );
        MainWindow mainWin;

        // if filename specified on command line as second argument try to load file
        if( argc == 2 && argv[ 1 ][ 0 ] != '-' )
        {
        	if( !FileIsReadable( argv[ 1 ] ) )
            {
                QMessageBox::critical( 0, "I/O Error", QString( "Cannot read file " ) + argv[ 1 ] );
                return 1;
            }
            QString fname( argv[ 1 ] );
            fname.replace( '\\', '/' );
            mainWin.LoadMolecule( fname.toStdString().c_str() ); // load molecule
        }
        // else if there in anything on the command line execute command line operations 
        else if( argc > 1 ) ExecuteCommandLine( argc, argv, &mainWin );

        // issues with mac metal style: central widget is not resized properly (Qt 4.1)
        // on Qt 4.3rc1 the widget surface is transparent!
        //mainWin.setAttribute( Qt::WA_MacMetalStyle );
        mainWin.show();
        QSettings settings;
        if( !settings.contains( MainWindow::MAIN_WINDOW_LAYOUT_KEY.c_str() ) )
        {
            mainWin.resize( DEFAULT_WIN_WIDTH, DEFAULT_WIN_HEIGHT );
        }
        else // if argc == 3 argv[ 1 ] == width, argv[ 2 ] == height, dockwidgets  == default
        {
            mainWin.move( settings.value( MainWindow::MAIN_WINDOW_X_KEY.c_str() ).toInt(),
                          settings.value( MainWindow::MAIN_WINDOW_Y_KEY.c_str() ).toInt() );
            mainWin.resize( settings.value( MainWindow::MAIN_WINDOW_WIDTH_KEY.c_str() ).toInt(),
                            settings.value( MainWindow::MAIN_WINDOW_HEIGHT_KEY.c_str() ).toInt() );
            mainWin.restoreState( settings.value( MainWindow::MAIN_WINDOW_LAYOUT_KEY.c_str()
                                         ).toByteArray() );
        }
        mainWin.UpdateViewMenu();
        mainWin.setWindowTitle( APPLICATION_NAME );
        /// @todo add support for Apple Open Event and
        /// create a proper .plist file to register file types

        return app.exec();
    }
    catch( const std::exception& ex )
    {
        LogError( ex.what() );
    }

    return 1;
}








